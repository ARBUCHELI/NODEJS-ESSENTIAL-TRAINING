** 2. Node Globals
------------------

* Inspecting the global object
------------------------------
	- In the browser the global object is called the Window, but in Node.js, the global object is called global

	- Functions, methods, classes that are scoped to the global namespace we don't need to import them. We can access them at any time.

	- If we type console.log("Hello World"); and global.console.log("Hello World"); the result is the same, and this probes that console.log belongs to the global object.

	- To run a program called global.js, you can type node global, and node.js will assume that is a JavaScript file.

	- Every new file that we create, will have its own scope, for that reason the following program won't work as expected and, the output will be undefined.

		let hello = "Hello World from Node.js";
		console.log(global.hello);

	- The solution is to write like this:
	
		console.log(hello);

===================================================================================================================================================================

* Using the require function
----------------------------
	- We also have globally available to use in Node.js:
		. referrences to the current file.
		. referrences to the current directory.

			console.log(__dirname);
			console.log(__filename);

	- Another globally available is the common.js module pattern. This is the pattern we are going to use to import other code into our files.

	- This is one way to import modules:
		
		const path = require("path");

	- With the following lines of code you can explore the options that you have in global:
	
		for (let key in global) {
    			console.log(key);
		}

Output:
-------
global
clearInterval
clearTimeout
setInterval
setTimeout
queueMicrotask
clearImmediate
setImmediate

==================================================================================================================================================================

* Handling argument variables with process.argv
-----------------------------------------------
	- One important object that is available to us globally is the process object.
		. Environment information.
		. Read environment variables.
		. Communicate with the terminal.

	- It gives as us way to work with that current process instance.

	- One of the things we can do with this object is collecting information from the terminal:
		. This information is stored in the process.argv array.

		console.log(process.argv);

Output
------
[
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\LINKEDIN LEARNING\\BECOME A FULL STACK WEB DEVELOPER\\NODEJS ESSENTIAL TRAINING\\process.js'
]

	- We also can pass information from the terminal:
		
		node process --user Andres --greeting "hello from node"

	- The output will be a larger array:

Output:
-------
[
  'C:\\Program Files\\nodejs\\node.exe',
  'C:\\Users\\Andres R. Bucheli\\Desktop\\SOFTWARE ENGINEER\\LINKEDIN LEARNING\\BECOME A FULL STACK WEB DEVELOPER\\NODEJS ESSENTIAL TRAINING\\process',
  '--user',
  'Andres',
  '--greeting',
  'hello from node'
]

	- All the typed values will be added to the array.

	- For example if we went to get the values after the flags denoted by "--" we can create the following code:

		function grab(flag) {
			let indexAfterFlag = process.argv.indexOf(flag) + 1;
			return process.argv[indexAfterFlag];
		}

		let greeting = grab("--greeting');
		let user = grab("--user");

		console.log(greeting);
		console.log(user);

	- With this code we are going to be able to isolate the greeting and the user, and this is a good example.

Output
------
$ node process --user Andres --greeting "hello from node"
hello from node
Andres

	- So using the process.argv array,  we are going to be able to collect user input, we can create all sorts of cool command line applications with node just by understanding this 
	array.

==================================================================================================================================================================

* Working with standard input
-----------------------------
	standard input and standard output offer us to communicate with a process while it's running.

standard-input-standard-output.js
---------------------------------
process.stdout.write("Hello \n \n");

const questions = [
    "What is your name?",
    "What would you rather be doing?",
    "What is your preferred programming language"
];

const answers = [];

function ask(i) {
    process.stdout.write(`\n\n\n ${questions[i]}`);
    process.stdout.write(` > `);
}

//ask(answers.length); -----> Until here running the app is going to ask the first question, it prompts the user for an answer and then it quits.

	What we need to do is to wait until the user answer the question.  So what we can do is to listen for a data event o this object, using a function.

process.stdin.on("data", function(data) {
    process.stdout.write(data.toString().trim()); -----> This is the line that was echoing the answer back.
})

ask(answers.length);

	At this point, the program is just copying everything that we do in the terminal. By adding the listener, we start using node asynchronously, so every other app we've run 
	until now has run through the command synchronously and quit, leaving us back at the terminal prompt, but this time, the app is still running, is waiting for some kind of input, 
	and that's something we need to solve, how to stop the process when we are out of data, and we are out of these prompts.

==================================================================================================================================================================

* Using standard output
-----------------------
	We need to change the code to collect answers.
	
	On this point we are collecting the answers but we are not doing anything with them yet.  

using-standard-output.js
------------------------
process.stdout.write("Hello \n \n");

const questions = [
    "What is your name?",
    "What would you rather be doing?",
    "What is your preferred programming language"
];

const answers = [];

//We can add a default argument to this function, and delete it from ask(answer.length);
function ask(i = 0) {
    process.stdout.write(`\n\n\n ${questions[i]}`);
    process.stdout.write(` > `);
}

ask();

process.stdin.on("data", function(data) {
    answers.push(data.toString().trim());
    if (answers.length < questions.length) {
        ask(answers.length);
    } else {
        process.exit();
    }
})

	Now we need to do something to display the results:

using-standard-output.js
------------------------
process.stdout.write("Hello \n \n");

const questions = [
    "What is your name?",
    "What would you rather be doing?",
    "What is your preferred programming language"
];

const answers = [];

//We can add a default argument to this function, and delete it from ask(answer.length);
function ask(i = 0) {
    process.stdout.write(`\n\n\n ${questions[i]}`);
    process.stdout.write(` > `);
}

ask();

process.stdin.on("data", function(data) {
    answers.push(data.toString().trim());
    if (answers.length < questions.length) {
        ask(answers.length);
    } else {
        process.exit();
    }
})

process.on("exit", function() {
    process.stdout.write("\n\n\n");
    process.stdout.write(`Go ${answers[1]} ${answers[0]} you can finish writing ${answers[2]} later`)
})

	Remember that standard input, and standard output objects, give us some powerful tools for communication with running process. These tools are available on the process object, 
	meaning that you can use them anywhere.

==================================================================================================================================================================

* Creating a delay with setTimeout
----------------------------------
	Another way to work asynchronously is using timing functions.

	




















	
		
	
