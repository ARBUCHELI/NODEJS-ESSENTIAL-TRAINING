# 4. File Management and Streams
--------------------------------

* Listing directory files
-------------------------
	fs module is used to work with files and directories.

	We use fs.readdirSync("./") to read the contents of the current directory synchronously with a blocking request. This means that I'm blocking the rest of the process until
	the file is read.

	We also can use fs.readdir() with a callback function.

list.js
-------
const fs = require("fs");

let files = fs.readdirSync("./");

console.log(files);

list.js
-------
const fs = require("fs");

//let files = fs.readdirSync("./");
fs.readdir("./", function (err, files) {
    if (err) {
        throw err;
    }
    console.log(files);
})

	We use these kinds of syntax to allow the app to do something else while the file or directory is being read.

==================================================================================================================================================================

* Reading files
---------------
	Allow us to read contents of a file, encoded into some sort of a text format.

	We can do it synchronously.

reading.js
----------
const fs = require("fs");

let ipsum = fs.readFileSync("./1. What is Nodejs.txt", "UTF-8");

console.log(ipsum);

	Or asynchronously.

reading.js
----------
const fs = require("fs");

//let ipsum = fs.readFileSync("./1. What is Nodejs.txt", "UTF-8");
fs.readFile("./1. What is Nodejs.txt", "UTF-8", (err, ipsum) => {
    console.log(ipsum);
})

console.log("reading the file...");

===================================================================================================================================================================

* Writing and appending files
-----------------------------
	The fs module can also be used for writing and appending.


writeFile.js
------------
const fs = require("fs");

let md = `
    This is a New File
    ==================

    ES6 Template Strings are cool. They honor whitespace.

    * Template Strings
    * Node File System
    * Readline CLIs
`;

fs.writeFile("javascript.md", md.trim(), function() {
    console.log("Markdown Created");
})

	We can append synchronously and asynchronously.

writeFile.js
------------
const fs = require("fs");

let md = `
    This is a New File
    ==================

    ES6 Template Strings are cool. They honor whitespace.

    * Template Strings
    * Node File System
    * Readline CLIs
`;

fs.writeFile("javascript.md", md.trim(), function(err) {
    if (err) {
        throw err;
    }
    fs.appendFileSync(
        "javascript.md",
        "\n\n### Node.js Everyone!"
    )
    console.log("Markdown Created");
})

==================================================================================================================================================================

* Creating directories
----------------------
	With fs we can also create directories.

directory.js
------------
const fs = require("fs");

fs.mkdir("your-files-here", function(err) {
    if(err) {
        console.log(`ERROR: ${err}`);
    } else {
        console.log('Directory created successfully!');
    }
})

	To make sure that a directory doesn't already exits:

directory.js
------------
const fs = require("fs");

if(fs.existsSync("your-files-here")) {
    console.log("already there!")
} else {
    fs.mkdir("your-files-here", function(err) {
        if(err) {
            console.log(`ERROR: ${err}`);
        } else {
            console.log('Directory created successfully!');
        }
    })
}

==================================================================================================================================================================

* Renaming and removing files
-----------------------------
	We can also use fs to rename files.

rename.js
---------
const fs = require("fs");

fs.renameSync("./lib/config.js", "./lib/project-config.js");

console.log("Config.js file renamed");

	We can also use rename to move files.  The following is an example of an asynchronous code:

rename.js
---------
const fs = require("fs");

fs.renameSync("./lib/config.js", "./lib/project-config.js");

console.log("Config.js file renamed");

	Files also can be removed with fs unlink

rename.js
---------
const fs = require("fs");

//fs.renameSync("./lib/config.js", "./lib/project-config.js");

//console.log("Config.js file renamed");

/*fs.rename("./lib/notes.md", "./notes.md", function(err) {
    if (err) {
        throw err;
    }
    console.log("Notes markdown file moved");
});*/

fs.unlinkSync("./lib/project-config.js");

	We also can asynchronously remove files and unlink will asynchronously remove our notes file.

rename.js
---------
const fs = require("fs");

//fs.renameSync("./lib/config.js", "./lib/project-config.js");

//console.log("Config.js file renamed");

/*fs.rename("./lib/notes.md", "./notes.md", function(err) {
    if (err) {
        throw err;
    }
    console.log("Notes markdown file moved");
});*/

//fs.unlinkSync("./lib/project-config.js");

fs.unlink("notes.md", function (err) {
    if (err) {
        throw err;
    }
    console.log("Notes are gone");
})

==================================================================================================================================================================























	
































