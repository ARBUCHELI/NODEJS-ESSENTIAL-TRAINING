# 4. File Management and Streams
--------------------------------

* Listing directory files
-------------------------
	fs module is used to work with files and directories.

	We use fs.readdirSync("./") to read the contents of the current directory synchronously with a blocking request. This means that I'm blocking the rest of the process until
	the file is read.

	We also can use fs.readdir() with a callback function.

list.js
-------
const fs = require("fs");

let files = fs.readdirSync("./");

console.log(files);

list.js
-------
const fs = require("fs");

//let files = fs.readdirSync("./");
fs.readdir("./", function (err, files) {
    if (err) {
        throw err;
    }
    console.log(files);
})

	We use these kinds of syntax to allow the app to do something else while the file or directory is being read.

==================================================================================================================================================================

* Reading files
---------------
	Allow us to read contents of a file, encoded into some sort of a text format.

	We can do it synchronously.

reading.js
----------
const fs = require("fs");

let ipsum = fs.readFileSync("./1. What is Nodejs.txt", "UTF-8");

console.log(ipsum);

	Or asynchronously.

reading.js
----------
const fs = require("fs");

//let ipsum = fs.readFileSync("./1. What is Nodejs.txt", "UTF-8");
fs.readFile("./1. What is Nodejs.txt", "UTF-8", (err, ipsum) => {
    console.log(ipsum);
})

console.log("reading the file...");

===================================================================================================================================================================

* Writing and appending files
-----------------------------
	The fs module can also be used for writing and appending.


writeFile.js
------------
const fs = require("fs");

let md = `
    This is a New File
    ==================

    ES6 Template Strings are cool. They honor whitespace.

    * Template Strings
    * Node File System
    * Readline CLIs
`;

fs.writeFile("javascript.md", md.trim(), function() {
    console.log("Markdown Created");
})

	We can append synchronously and asynchronously.

writeFile.js
------------
const fs = require("fs");

let md = `
    This is a New File
    ==================

    ES6 Template Strings are cool. They honor whitespace.

    * Template Strings
    * Node File System
    * Readline CLIs
`;

fs.writeFile("javascript.md", md.trim(), function(err) {
    if (err) {
        throw err;
    }
    fs.appendFileSync(
        "javascript.md",
        "\n\n### Node.js Everyone!"
    )
    console.log("Markdown Created");
})

==================================================================================================================================================================

* Creating directories
----------------------
	With fs we can also create directories.

directory.js
------------
const fs = require("fs");

fs.mkdir("your-files-here", function(err) {
    if(err) {
        console.log(`ERROR: ${err}`);
    } else {
        console.log('Directory created successfully!');
    }
})

	To make sure that a directory doesn't already exits:

directory.js
------------
const fs = require("fs");

if(fs.existsSync("your-files-here")) {
    console.log("already there!")
} else {
    fs.mkdir("your-files-here", function(err) {
        if(err) {
            console.log(`ERROR: ${err}`);
        } else {
            console.log('Directory created successfully!');
        }
    })
}

==================================================================================================================================================================

* Renaming and removing files
-----------------------------
	We can also use fs to rename files.

rename.js
---------
const fs = require("fs");

fs.renameSync("./lib/config.js", "./lib/project-config.js");

console.log("Config.js file renamed");

	We can also use rename to move files.  The following is an example of an asynchronous code:

rename.js
---------
const fs = require("fs");

fs.renameSync("./lib/config.js", "./lib/project-config.js");

console.log("Config.js file renamed");

	Files also can be removed with fs unlink

rename.js
---------
const fs = require("fs");

//fs.renameSync("./lib/config.js", "./lib/project-config.js");

//console.log("Config.js file renamed");

/*fs.rename("./lib/notes.md", "./notes.md", function(err) {
    if (err) {
        throw err;
    }
    console.log("Notes markdown file moved");
});*/

fs.unlinkSync("./lib/project-config.js");

	We also can asynchronously remove files and unlink will asynchronously remove our notes file.

rename.js
---------
const fs = require("fs");

//fs.renameSync("./lib/config.js", "./lib/project-config.js");

//console.log("Config.js file renamed");

/*fs.rename("./lib/notes.md", "./notes.md", function(err) {
    if (err) {
        throw err;
    }
    console.log("Notes markdown file moved");
});*/

//fs.unlinkSync("./lib/project-config.js");

fs.unlink("notes.md", function (err) {
    if (err) {
        throw err;
    }
    console.log("Notes are gone");
})

==================================================================================================================================================================

* Renaming and removing directories
-----------------------------------
	
directories.js
--------------
const fs = require("fs");

fs.renameSync("./assets/logs", "accounts/logs");

console.log("logs folder moved")

	We can also remove directories


directories.js
--------------
fs.rmdir("./assets", function(err) {
    if(err) {
        console.log(err)
    } else {
        console.log("./accounts directory removed");
    }
});

	If we want to remove a directory, we need to get rid that everything that is inside of the directory.
	We need to implement this functionality using a forEach loop.


directories.js
--------------
const fs = require("fs");

//fs.renameSync("./assets/logs", "accounts/logs");

//console.log("logs folder moved")

/*fs.rmdir("./assets", function(err) {
    if(err) {
        console.log(err)
    } else {
        console.log("./accounts directory removed");
    }
});*/

fs.readdirSync("./accounts").forEach((file) => {
    fs.renameSync(`./accounts/${file}`, `./library/${file}`);
});

console.log("Files Removed");
fs.rmdirSync("./accounts");
console.log("Folder Removed");

==================================================================================================================================================================

* Readable file streams
-----------------------
	Streams in Node.js give us a way to asynchronously handle continuous data flows.

	Understanding how streams work can dramatically improve the way our applications handle large data.

	We've been using already streams, because process.stdout and process.stdin implement the stream interface.

	Remember the following code:

using-standard-output.js
------------------------
process.stdout.write("Hello \n \n");

const questions = [
    "What is your name?",
    "What would you rather be doing?",
    "What is your preferred programming language"
];

const answers = [];

//We can add a default argument to this function, and delete it from ask(answer.length);
function ask(i = 0) {
    process.stdout.write(`\n\n\n ${questions[i]}`);
    process.stdout.write(` > `);
}

ask();

process.stdin.on("data", function(data) {
    answers.push(data.toString().trim());
    if (answers.length < questions.length) {
        ask(answers.length);
    } else {
        process.exit();
    }
})

process.on("exit", function() {
    process.stdout.write("\n\n\n");
    process.stdout.write(`Go ${answers[1]} ${answers[0]} you can finish writing ${answers[2]} later`)
})

	Let's consider how working with file streams my allow to improve our applications.

	The problem with the following code is that Node waits until the entire file is read, before calling the callback function.

streams.js
----------
const fs = require("fs");

fs.readFile(
    "./chat-logs/george-ben-chat.log", 
    "UTF-8", 
    (err, chatLog) => {
        console.log(`File Read ${chatLog.length}`);
    }
);

console.log("Reading the file");

	We can implement a better solution with a readable stream:

	Insted of reading an entire file at once, a stream breaks the file down into bits or into different chunks.

	Readable streams raise data events and pass small chuncks of data to a callback.

	Using streams means that we don't have to wait for the entire file to finish loading, before we start reading the video. (Streaming video is a clear example of this).

	We break the video into chunks.

streams.js
----------
const fs = require("fs");

let stream = fs.createReadStream(
    "./chat-logs/george-ben-chat.log",
    "UTF-8"
);

let data;

stream.once("data", (chunk) => {
    console.log("read stream started");
    console.log("==========");
    console.log(chunk);
});

stream.on("data", (chunk) => {
    console.log(`chunk: ${chunk.length}`);
    data += chunk;
})

stream.on("end", () => {
    console.log(`finished ${data.length}`);
})

console.log("Reading the file");


==================================================================================================================================================================

* Writable file Streams
-----------------------
	The writable is used to write the data chunks data are being read by the readable streams. Let's improve our ask questions app (In my case the name of this app is 
	using-standard-output.js).


using-standard-output.js
------------------------
const fs = require("fs");

let answerStream;

//process.stdout.write("Hello \n \n");

const questions = [
    "What is your name?",
    "What would you rather be doing?",
    "What is your preferred programming language"
];

const answers = [];

//We can add a default argument to this function, and delete it from ask(answer.length);
function ask(i = 0) {
    process.stdout.write(`\n\n\n ${questions[i]}`);
    process.stdout.write(` > `);
}

//ask();

process.stdin.once("data", (data) => {
    let name = data.toString().trim();
    let fileName = `./${name}.md`;
    if (fs.existsSync(fileName)) {
        fs.unlinkSync(fileName);
    }
    answerStream = fs.createWriteStream(fileName);
    answerStream.write(
        `Question Answers for ${name}\n==========\n`
    );
})

process.stdin.on("data", function(data) {
    let answer = data.toString().trim();

    answerStream.write(
        `Question: ${questions[answers.length]}\n`
    );

    answerStream.write(`Answer: ${answer}\n`, function () {
        if (answers.length < questions.length) {
            ask(answers.length);
        } else {
            process.exit();
        }
    });
    answers.push(answer);
})

process.on("exit", function() {
    answerStream.close();
    process.stdout.write("\n\n\n");
    process.stdout.write(
        `Go ${answers[1]} ${answers[0]} you can finish writing ${answers[2]} later`
    );
    process.stdout.write("\n\n\n\n");
});

ask(answers.length);




































	
































