# 3. Node Modules
-----------------

* Understanding core modules
----------------------------
	Remember that one of the global available functions is the require function. This is what we use to load modules.

	The path module is one example that a module that comes with Node.js

	We can also use this module to create path strings. The path.join function can be used to join them together.

	There is also a utile module. utile has also a log method.

	There is also a module called v8. This is used to get information about how much memory, the app is using.

====================================================================================================================================================================

* Collecting information with readline
--------------------------------------
	readline is a module that allows us to ask questions of our terminal user.

readline-example.js
-------------------
const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

rl.question("How do you like Node?  ", answer => {
    console.log(`Your answer: ${answer}`);
});

	At this moment, we are answering our own question. In the next lesson we are going to improve this a little bit.

===================================================================================================================================================================

* Using readline
----------------
	Here we are studying some common patterns that we constantly use in Node.js:
		. We constantly send functions to other functions as arguments (for example in done function).

using-readline.js
-----------------
const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const questions = [
    "What is your name?  ",
    "Where do you live?  ",
    "What are you going to do with Node.js? "
]
//The done callback is going to fire, when we are done asquing questions
function collectAnswers(questions, done) {
    const answers = [];

    const questionAnswered = answer => {
        answers.push(answer.trim());
        if (answers.length < questions.length) {
            rl.question(
                questions[answers.length], 
                questionAnswered
            );
        } else {
            return done(answers);
        }
    };
    rl.question(questions[0], questionAnswered);
}

collectAnswers(questions, (answers) => {
    console.log("Thank you for your answers!");
    console.log(answers);
    process.exit();
})



==================================================================================================================================================================

* Exporting custom modules
--------------------------
	- Every JavaScript file is a module. We've been loading modules with the require function, but we need to export the modules too.

	- We can break our code up into separate files called modules.  Modules make our code reusable and consumable, because we can publish our modules with npm and share them with
	the rest of the community.

myModule.js
-----------
let count = 0;

const inc = () => ++count;
const dec = () => --count;

const getCount = () => count;

module.exports = {
    anything: true,
    who: "Bill",
    count,
    inc,
    dec,
    getCount
};

app.js
------
//const myModule = require("./myModule");
const { inc, dec, getCount } = require("./myModule");

inc();
inc();
inc();

//console.log(myModule.anything);
//console.log(myModule.inc());

console.log(`the count is ${getCount()}`);

==================================================================================================================================================================

* Creating a module
-------------------
	- A useful Node.js tools is the event emitter.  The event emitter is the Node.js implementation of the pub-sub design pattern. It allow us to create listeners for
	and emit custom events.

	- The event emitter is a powerful tool that allows us to decouple logic and handle asynchronicity in JavaScript.


eventEmitter.js
---------------
const events = require("events");

let emitter = new events.EventEmitter();

emitter.on("customEvent", (message, user) => {
    console.log(`${user}: ${message}`);
});

emitter.emit("customEvent", "Hello World", "Computer");
emitter.emit("customEvent", "That's pretty cool", "Andres");

process.stdin.on("data", (data) => {
    const input = data.toString().trim();
    if(input === "exit") {
        emitter.emit("customEvent", "Goodbye!", "process");
        process.exit();
    }
    emitter.emit(
        "customEvent",
        data.toString().trim(),
        "terminal"
    );
})

==================================================================================================================================================================

* Custom events with the EventEmitter
-------------------------------------
	- First we are going to create a lib folder that will contain functions that we are going to use in different places.

lib/collectAnswers.js
---------------------
const readline = require("readline");
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});


//The done callback is going to fire, when we are done asquing questions
module.exports = (questions, done) => {
    const answers = [];

    const questionAnswered = answer => {
        answers.push(answer.trim());
        if (answers.length < questions.length) {
            rl.question(
                questions[answers.length], 
                questionAnswered
            );
        } else {
            return done(answers);
        }
    };
    rl.question(questions[0], questionAnswered);
}

using-readline.js
-----------------
const collectAnswers = require("./lib/collectAnswers")

const questions = [
    "What is your name?  ",
    "Where do you live?  ",
    "What are you going to do with Node.js? "
]
//The done callback is going to fire, when we are done asquing questions

collectAnswers(questions, (answers) => {
    console.log("Thank you for your answers!");
    console.log(answers);
    process.exit();
})

==================================================================================================================================================================

* Consuming a module with EventEmitter
--------------------------------------

collectAnswer.js
----------------
const readline = require("readline");

//Consuming a module with EventEmitter
const { EventEmitter } = require("events");

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});


//The done callback is going to fire, when we are done asquing questions
module.exports = (questions, done) => {
    const answers = [];
    const [firstQuestion] = questions;

    const emitter = new EventEmitter();

    const questionAnswered = answer => {
        //Let's say we want to raise and event everytime the user answer a question
        emitter.emit("answer", answer);
        answers.push(answer.trim());
        if (answers.length < questions.length) {
            rl.question(
                questions[answers.length], 
                questionAnswered
            );
        } else {
            return done(answers);
        }
    };
    rl.question(firstQuestion, questionAnswered);
    //Now we can use this emitter to raise events when certain things happen within this function
    return emitter;
}

using-readline.js
-----------------
const collectAnswers = require("./lib/collectAnswers")

const questions = [
    "What is your name?  ",
    "Where do you live?  ",
    "What are you going to do with Node.js? "
]
//The done callback is going to fire, when we are done asquing questions

/** Exercise Consuming a module with EventEmitter.
 * Because our collectAnswers function now returns an event emitter, we can do this:
 */

const answerEvents = collectAnswers(questions, (answers) => {
    console.log("Thank you for your answers!");
    console.log(answers);
    process.exit();
})

answerEvents.on("answer", answer => console.log(`The answer is ${answer}`))

==================================================================================================================================================================





	



































